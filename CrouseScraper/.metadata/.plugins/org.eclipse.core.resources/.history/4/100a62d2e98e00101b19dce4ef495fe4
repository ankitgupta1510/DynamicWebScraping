import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.json.JSONObject;
import org.json.JSONArray;

import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.TimeUnit;

public class Apptest {
    
    // Configuration
    private static final String GRAPHQL_URL = "https://www.coursera.org/graphql-gateway?opname=Search";
    private static final String USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36";
    private static final int DELAY_MS = 2000; // 2 seconds delay between requests
    private static final int MAX_RETRIES = 3;
    
    private final Map<String, String> categories;
    private final List<Course> allCourses;
    
    public Apptest() {
        this.allCourses = new ArrayList<>();
        this.categories = initializeCategories();
    }
    
    // Categories to scrape
    private Map<String, String> initializeCategories() {
        Map<String, String> cats = new HashMap<>();
        cats.put("computer-science", "Computer Science");
        cats.put("data-science", "Data Science");
        cats.put("information-technology", "Information Technology");
        cats.put("business", "Business");
        cats.put("engineering", "Engineering");
        cats.put("mathematics", "Mathematics");
        cats.put("artificial-intelligence", "Artificial Intelligence");
        cats.put("machine-learning", "Machine Learning");
        return cats;
    }
    
    // Main scraping method
    public void scrapeAllCourses() {
        System.out.println("üöÄ Starting Coursera Course Scraper...");
        System.out.println("üìã Categories to scrape: " + categories.size());
        
        for (Map.Entry<String, String> category : categories.entrySet()) {
            try {
                System.out.println("\nüìö Scraping category: " + category.getValue());
                List<Course> categoryCourses = scrapeCategoryWithPagination(category.getKey(), category.getValue());
                allCourses.addAll(categoryCourses);
                System.out.println("‚úÖ Found " + categoryCourses.size() + " courses in " + category.getValue());
                
                // Delay between categories
                Thread.sleep(DELAY_MS);
                
            } catch (Exception e) {
                System.err.println("‚ùå Error scraping " + category.getValue() + ": " + e.getMessage());
            }
        }
        
        // Save results
        saveToCSV();
        printSummary();
    }
    
    // Scrape single category with pagination
    private List<Course> scrapeCategoryWithPagination(String categorySlug, String categoryName) throws Exception {
        List<Course> courses = new ArrayList<>();
        int start = 0;
        int limit = 20; // Coursera typically loads 20 courses per request
        boolean hasMore = true;
        int page = 1;
        
        while (hasMore) {
            try {
                System.out.println("   üìÑ Page " + page + " (start: " + start + ")");
                
                // Build GraphQL query
                String graphqlQuery = buildGraphQLQuery(categorySlug, start, limit);
                
                // Make request
                String response = makeGraphQLRequest(graphqlQuery);
                
                // Parse response
                List<Course> pageCourses = parseCoursesFromResponse(response, categoryName);
                
                if (pageCourses.isEmpty()) {
                    hasMore = false;
                    System.out.println("   ‚èπÔ∏è No more courses found");
                } else {
                    courses.addAll(pageCourses);
                    start += limit;
                    page++;
                    
                    // Rate limiting
                    Thread.sleep(DELAY_MS);
                }
                
            } catch (Exception e) {
                System.err.println("   ‚ö†Ô∏è Error on page " + page + ": " + e.getMessage());
                
                // Retry logic
                if (page <= MAX_RETRIES) {
                    System.out.println("   üîÑ Retrying...");
                    Thread.sleep(DELAY_MS * 2);
                    continue;
                } else {
                    hasMore = false;
                }
            }
        }
        
        return courses;
    }
    
    // Build GraphQL query for Coursera
    private String buildGraphQLQuery(String query, int start, int limit) {
        JSONObject variables = new JSONObject();
        variables.put("query", query);
        variables.put("start", start);
        variables.put("limit", limit);
        
        JSONObject graphqlQuery = new JSONObject();
        graphqlQuery.put("query", """
            query CatalogQuery($query: String!, $start: Int!, $limit: Int!) {
              CatalogV1 {
                search(query: $query, start: $start, limit: $limit) {
                  elements {
                    ... on Course {
                      id
                      name
                      slug
                      description
                      averageRating
                      enrollmentCount
                      partners {
                        name
                        shortName
                      }
                      skills {
                        name
                      }
                      certificates {
                        name
                      }
                      difficulty
                      workload
                    }
                  }
                  paging {
                    total
                    next
                  }
                }
              }
            }""");
        graphqlQuery.put("variables", variables);
        
        return graphqlQuery.toString();
    }
    
    // Make GraphQL request to Coursera
    private String makeGraphQLRequest(String query) throws IOException {
        Connection.Response response = Jsoup.connect(GRAPHQL_URL)
                .userAgent(USER_AGENT)
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .header("Referer", "https://www.coursera.org/")
                .header("Origin", "https://www.coursera.org")
                .method(Connection.Method.POST)
                .requestBody(query)
                .timeout(30000)
                .ignoreContentType(true)
                .execute();
        
        if (response.statusCode() != 200) {
            throw new IOException("HTTP " + response.statusCode() + ": " + response.statusMessage());
        }
        
        return response.body();
    }
    
    // Parse courses from GraphQL response using org.json
    private List<Course> parseCoursesFromResponse(String responseBody, String category) {
        List<Course> courses = new ArrayList<>();
        
        try {
            JSONObject root = new JSONObject(responseBody);
            JSONObject data = root.getJSONObject("data");
            JSONObject catalogV1 = data.getJSONObject("CatalogV1");
            JSONObject search = catalogV1.getJSONObject("search");
            JSONArray elements = search.getJSONArray("elements");
            
            for (int i = 0; i < elements.length(); i++) {
                JSONObject element = elements.getJSONObject(i);
                Course course = parseSingleCourse(element, category);
                if (course != null) {
                    courses.add(course);
                }
            }
            
        } catch (Exception e) {
            System.err.println("   ‚ö†Ô∏è Error parsing response: " + e.getMessage());
            
            // Fallback to simple search if GraphQL fails
            try {
                courses = fallbackSearch(category);
            } catch (Exception fallbackE) {
                System.err.println("   ‚ö†Ô∏è Fallback search also failed: " + fallbackE.getMessage());
            }
        }
        
        return courses;
    }
    
    // Parse single course from JSON using org.json
    private Course parseSingleCourse(JSONObject courseNode, String category) {
        try {
            String id = courseNode.optString("id", "");
            String name = courseNode.optString("name", "");
            String slug = courseNode.optString("slug", "");
            String description = courseNode.optString("description", "");
            double rating = courseNode.optDouble("averageRating", 0.0);
            int enrollments = courseNode.optInt("enrollmentCount", 0);
            String difficulty = courseNode.optString("difficulty", "Not specified");
            String workload = courseNode.optString("workload", "Not specified");
            
            // Extract partners
            List<String> partners = new ArrayList<>();
            if (courseNode.has("partners")) {
                JSONArray partnersArray = courseNode.getJSONArray("partners");
                for (int i = 0; i < partnersArray.length(); i++) {
                    JSONObject partner = partnersArray.getJSONObject(i);
                    partners.add(partner.optString("name", ""));
                }
            }
            
            // Extract skills
            List<String> skills = new ArrayList<>();
            if (courseNode.has("skills")) {
                JSONArray skillsArray = courseNode.getJSONArray("skills");
                for (int i = 0; i < skillsArray.length(); i++) {
                    JSONObject skill = skillsArray.getJSONObject(i);
                    skills.add(skill.optString("name", ""));
                }
            }
            
            return new Course(id, name, slug, description, category, rating, 
                            enrollments, difficulty, workload, partners, skills);
                            
        } catch (Exception e) {
            System.err.println("   ‚ö†Ô∏è Error parsing course: " + e.getMessage());
            return null;
        }
    }
    
    // Fallback search using regular Coursera search
    private List<Course> fallbackSearch(String category) throws Exception {
        List<Course> courses = new ArrayList<>();
        
        String searchUrl = String.format(
            "https://www.coursera.org/search?query=%s&productTypeDescription=Courses",
            category.replace("-", "%20")
        );
        
        Connection.Response response = Jsoup.connect(searchUrl)
                .userAgent(USER_AGENT)
                .timeout(30000)
                .execute();
        
        // Simple HTML parsing as fallback
        String html = response.body();
        
        // Extract course data using regex or basic parsing
        // This is a simplified approach when GraphQL fails
        if (html.contains("course")) {
            System.out.println("   üìù Using HTML fallback for category: " + category);
            // Add basic course entries
            courses.add(new Course(
                "fallback-" + category,
                "Courses in " + category,
                category,
                "Category: " + category,
                category,
                0.0,
                0,
                "Various",
                "Various",
                Arrays.asList("Coursera"),
                Arrays.asList(category)
            ));
        }
        
        return courses;
    }
    
    // Save results to CSV
    private void saveToCSV() {
        try (FileWriter writer = new FileWriter("coursera_courses.csv")) {
            // CSV Header
            writer.append("ID,Name,Slug,Category,Rating,Enrollments,Difficulty,Workload,Partners,Skills,Description\n");
            
            // Write courses
            for (Course course : allCourses) {
                writer.append(String.format("\"%s\",\"%s\",\"%s\",\"%s\",%.2f,%d,\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"\n",
                    sanitize(course.id),
                    sanitize(course.name),
                    sanitize(course.slug),
                    sanitize(course.category),
                    course.rating,
                    course.enrollments,
                    sanitize(course.difficulty),
                    sanitize(course.workload),
                    sanitize(String.join("; ", course.partners)),
                    sanitize(String.join("; ", course.skills)),
                    sanitize(course.description.length() > 200 ? 
                            course.description.substring(0, 200) + "..." : 
                            course.description)
                ));
            }
            
            System.out.println("\nüíæ Saved " + allCourses.size() + " courses to coursera_courses.csv");
            
        } catch (IOException e) {
            System.err.println("‚ùå Error saving to CSV: " + e.getMessage());
        }
    }
    
    // Sanitize CSV data
    private String sanitize(String input) {
        if (input == null) return "";
        return input.replace("\"", "\"\"").replace("\n", " ").replace("\r", "");
    }
    
    // Print summary
    private void printSummary() {
        System.out.println("\nüìä SCRAPING SUMMARY");
        System.out.println("==================");
        System.out.println("Total courses found: " + allCourses.size());
        
        // Group by category
        Map<String, Long> categoryCount = new HashMap<>();
        for (Course course : allCourses) {
            categoryCount.merge(course.category, 1L, Long::sum);
        }
        
        System.out.println("\nCourses by category:");
        categoryCount.entrySet().stream()
            .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
            .forEach(entry -> System.out.println("  " + entry.getKey() + ": " + entry.getValue()));
        
        // Top rated courses
        System.out.println("\nTop 5 rated courses:");
        allCourses.stream()
            .filter(c -> c.rating > 0)
            .sorted((c1, c2) -> Double.compare(c2.rating, c1.rating))
            .limit(5)
            .forEach(course -> System.out.println(String.format("  %.1f ‚≠ê %s", course.rating, course.name)));
    }
    
    // Course data class
    public static class Course {
        public String id;
        public String name;
        public String slug;
        public String description;
        public String category;
        public double rating;
        public int enrollments;
        public String difficulty;
        public String workload;
        public List<String> partners;
        public List<String> skills;
        
        public Course(String id, String name, String slug, String description, String category, 
                     double rating, int enrollments, String difficulty, String workload,
                     List<String> partners, List<String> skills) {
            this.id = id != null ? id : "";
            this.name = name != null ? name : "";
            this.slug = slug != null ? slug : "";
            this.description = description != null ? description : "";
            this.category = category != null ? category : "";
            this.rating = rating;
            this.enrollments = enrollments;
            this.difficulty = difficulty != null ? difficulty : "";
            this.workload = workload != null ? workload : "";
            this.partners = partners != null ? partners : new ArrayList<>();
            this.skills = skills != null ? skills : new ArrayList<>();
        }
    }
    
    // Main method
    public static void main(String[] args) {
        Apptest scraper = new Apptest();
        scraper.scrapeAllCourses();
        System.out.println("\nüéâ Scraping completed successfully!");
    }
}
