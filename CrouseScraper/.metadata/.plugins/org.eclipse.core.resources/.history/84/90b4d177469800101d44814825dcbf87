package flow;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.util.ArrayList;
import java.util.List;

public class MainTable {
    
    static class InsurancePlanCard {
        String planName;
        String coverAmount;
        String startingPrice;
        String planType; // Individual, Family, Senior Citizen
        String features;
        String benefits;
        
        InsurancePlanCard(String name, String cover, String price, String type) {
            this.planName = name;
            this.coverAmount = cover;
            this.startingPrice = price;
            this.planType = type;
        }
    }
    
    public static void main(String[] args) {
        String url = "https://www.policybazaar.com/health-insurance/health-insurance-india";
        List<InsurancePlanCard> cardPlans = new ArrayList<>();
        
        try {
            Document doc = Jsoup.connect(url)
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .timeout(15000)
                .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                .header("Accept-Language", "en-US,en;q=0.5")
                .get();

            // First extract table data (your existing code)
            Elements insuranceTable = doc.select("div.allinsurer table tbody tr");
            System.out.println("Table Plans Found: " + insuranceTable.size());
            
            for (Element row : insuranceTable) {
                Elements cells = row.select("td");
                if (cells.size() >= 3) {
                    Element planCell = cells.get(0);
                    String planName = planCell.select("a").text();
                    String sumInsured = cells.get(1).text();
                    String entryAge = cells.get(2).text();

                    if (!planName.isEmpty() && !planName.contains("Name of Health Insurance Plan")) {
                        System.out.println("Table Plan: " + planName);
                        System.out.println("Sum Insured: " + sumInsured);
                        System.out.println("Entry Age: " + entryAge);
                        System.out.println("---");
                    }
                }
            }
            
            System.out.println("\n=== EXTRACTING CARD-BASED PLANS ===\n");
            
            // Extract card-based data (new section)
            // Try multiple possible selectors for cards
            String[] cardSelectors = {
                ".card-content", 
                ".card-body",
                ".plan-card",
                ".insurance-card",
                "div[class*='card']",
                ".featuresActionBar",
                ".cover-price",
                ".label-value"
            };
            
            for (String selector : cardSelectors) {
                Elements cards = doc.select(selector);
                if (!cards.isEmpty()) {
                    System.out.println("Found " + cards.size() + " elements with selector: " + selector);
                    
                    for (Element card : cards) {
                        // Extract cover amount
                        String coverAmount = extractCoverAmount(card);
                        
                        // Extract starting price
                        String startingPrice = extractStartingPrice(card);
                        
                        // Extract plan type
                        String planType = extractPlanType(card);
                        
                        // Extract plan name
                        String planName = extractPlanName(card);
                        
                        if (!coverAmount.isEmpty() || !startingPrice.isEmpty() || !planType.isEmpty()) {
                            System.out.println("Card Plan Found:");
                            System.out.println("  Plan Name: " + planName);
                            System.out.println("  Cover Amount: " + coverAmount);
                            System.out.println("  Starting Price: " + startingPrice);
                            System.out.println("  Plan Type: " + planType);
                            System.out.println("  Full Text: " + card.text().substring(0, Math.min(100, card.text().length())) + "...");
                            System.out.println("---");
                            
                            cardPlans.add(new InsurancePlanCard(planName, coverAmount, startingPrice, planType));
                        }
                    }
                }
            }
            
            // Try to extract from tab sections (Individual, Family, Senior Citizen)
            extractFromTabs(doc);
            
            System.out.println("\nTotal Card Plans Extracted: " + cardPlans.size());
            
        } catch(Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static String extractCoverAmount(Element card) {
        // Look for cover amount patterns
        Elements coverElements = card.select(".cover-amount, .label-value, [class*='cover'], [class*='amount']");
        for (Element elem : coverElements) {
            String text = elem.text();
            if (text.contains("₹") || text.toLowerCase().contains("lakh") || text.toLowerCase().contains("crore")) {
                return text.trim();
            }
        }
        
        // Fallback: search in all text for price patterns
        String fullText = card.text();
        if (fullText.contains("₹") && (fullText.contains("Lakh") || fullText.contains("lakh"))) {
            // Extract using regex or simple string manipulation
            String[] parts = fullText.split("₹");
            for (String part : parts) {
                if (part.toLowerCase().contains("lakh") || part.toLowerCase().contains("crore")) {
                    return "₹" + part.trim().split(" ")[0] + " " + 
                           (part.toLowerCase().contains("lakh") ? "Lakh" : "Crore");
                }
            }
        }
        return "";
    }
    
    private static String extractStartingPrice(Element card) {
        // Look for starting price patterns
        Elements priceElements = card.select(".price, .premium, [class*='price'], [class*='premium']");
        for (Element elem : priceElements) {
            String text = elem.text();
            if (text.contains("₹") || text.toLowerCase().contains("starting")) {
                return text.trim();
            }
        }
        
        String fullText = card.text();
        if (fullText.toLowerCase().contains("starting at") || fullText.toLowerCase().contains("starts from")) {
            // Extract price after "starting at"
            String[] parts = fullText.toLowerCase().split("starting at|starts from");
            if (parts.length > 1) {
                String priceSection = parts[1].trim();
                if (priceSection.contains("₹")) {
                    return priceSection.split(" ")[0] + " " + priceSection.split(" ")[1];
                }
            }
        }
        return "";
    }
    
    private static String extractPlanType(Element card) {
        String fullText = card.text().toLowerCase();
        if (fullText.contains("individual")) return "Individual";
        if (fullText.contains("family")) return "Family";
        if (fullText.contains("senior citizen") || fullText.contains("senior")) return "Senior Citizen";
        if (fullText.contains("top-up")) return "Top-up";
        return "";
    }
    
    private static String extractPlanName(Element card) {
        // Look for plan name in headings or links
        Elements nameElements = card.select("h1, h2, h3, h4, a, .plan-name, .title");
        for (Element elem : nameElements) {
            String text = elem.text().trim();
            if (!text.isEmpty() && text.length() > 5) {
                return text;
            }
        }
        
        // Fallback: first meaningful text
        String fullText = card.text().trim();
        if (fullText.length() > 10) {
            return fullText.split(" ")[0] + " " + fullText.split(" ")[1] + "...";
        }
        return "";
    }
    
    private static void extractFromTabs(Document doc) {
        // Extract from tab sections like Individual, Family, Senior Citizen
        Elements tabSections = doc.select("#Individual, #Family, #SeniorCitizen, .tab-panel, .tab-content");
        
        for (Element section : tabSections) {
            System.out.println("Tab Section ID: " + section.id());
            Elements cards = section.select(".card, .plan, [class*='card']");
            
            for (Element card : cards) {
                String text = card.text();
                if (text.contains("₹") || text.contains("Cover") || text.contains("Starting")) {
                    System.out.println("Tab Card: " + text.substring(0, Math.min(150, text.length())) + "...");
                }
            }
        }
    }
}
