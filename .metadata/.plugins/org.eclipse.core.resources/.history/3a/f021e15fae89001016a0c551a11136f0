package crawlerDesign;

package web;

import java.util.ArrayList;
import java.util.List;
import org.jsoup.Connection;
import org.jsoup.Connection.Response;
import org.jsoup.Jsoup;
import org.json.JSONArray;
import org.json.JSONObject;

public class ScrapingLogic {
    
    private static final String BASE_URL = "https://digital.dmart.in/api/v3/plp/biscuits---cookies-aesc-biscuitsandcookies";
    private static final int PAGE_SIZE = 40;
    private static final String STORE_ID = "10151";
    
    public List<ProductData> scrapeAllProducts() {
        List<ProductData> allProducts = new ArrayList<>();
        int currentPage = 1;
        boolean hasMorePages = true;
        
        while (hasMorePages) {
            System.out.println("Scraping page: " + currentPage);
            
            try {
                String jsonResponse = fetchPageData(currentPage);
                List<ProductData> pageProducts = parseProductsFromJson(jsonResponse);
                
                if (pageProducts.isEmpty()) {
                    hasMorePages = false;
                    System.out.println("No more products found. Stopping.");
                } else {
                    allProducts.addAll(pageProducts);
                    System.out.println("Found " + pageProducts.size() + " products on page " + currentPage);
                    currentPage++;
                    Thread.sleep(1000);
                }
                
            } catch (Exception e) {
                System.err.println("Error scraping page " + currentPage + ": " + e.getMessage());
                hasMorePages = false;
            }
        }
        
        return allProducts;
    }
    
    private String fetchPageData(int pageNumber) throws Exception {
        String url = BASE_URL + "?page=" + pageNumber + "&size=" + PAGE_SIZE + 
                    "&channel=web&storeId=" + STORE_ID;
        
        Response response = Jsoup.connect(url)
            .userAgent("Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:142.0) Gecko/20100101 Firefox/142.0")
            .header("Accept", "application/json, text/plain, */*")
            .header("Accept-Language", "en-US,en;q=0.5")
            .ignoreContentType(true)
            .method(Connection.Method.GET)
            .execute();
            
        return response.body();
    }
    
    private List<ProductData> parseProductsFromJson(String jsonString) {
        List<ProductData> products = new ArrayList<>();
        
        try {
            JSONObject jsonObj = new JSONObject(jsonString);
            
            if (jsonObj.has("products")) {
                JSONArray productsArray = jsonObj.getJSONArray("products");
                
                for (int i = 0; i < productsArray.length(); i++) {
                    JSONObject product = productsArray.getJSONObject(i);
                    
                    String categoryName = product.optString("categoryName", "N/A");
                    String productName = product.optString("name", "N/A");
                    
                    JSONArray skus = product.optJSONArray("sKUs");
                    if (skus != null) {
                        for (int j = 0; j < skus.length(); j++) {
                            JSONObject sku = skus.getJSONObject(j);
                            
                            String variantWtStr = sku.optString("variantTextValue", "0 g")
                                                    .replace("g", "").trim();
                            double variantWt = parseWeight(variantWtStr);
                            double priceMRP = sku.optDouble("priceMRP", 0.0);
                            double priceSALE = sku.optDouble("priceSALE", 0.0);
                            
                            ProductData productData = new ProductData(
                                categoryName, productName, variantWt, priceMRP, priceSALE
                            );
                            products.add(productData);
                        }
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("Error parsing JSON: " + e.getMessage());
        }
        
        return products;
    }
    
    private double parseWeight(String weightStr) {
        try {
            return Double.parseDouble(weightStr);
        } catch (NumberFormatException e) {
            return 0.0;
        }
    }
}
