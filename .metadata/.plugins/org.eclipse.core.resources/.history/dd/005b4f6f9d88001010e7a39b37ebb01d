package web;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class Webscrapper2 {
    
    public static void main(String[] args) {
        String url = "https://www.dmart.in/category/biscuits---cookies-aesc-biscuitsandcookies";
        
        try {
            // Enhanced connection with better headers
            Connection.Response response = Jsoup.connect(url)
                    .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
                    .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
                    .header("Accept-Language", "en-US,en;q=0.5")
                    .header("Accept-Encoding", "gzip, deflate")
                    .header("Connection", "keep-alive")
                    .header("Upgrade-Insecure-Requests", "1")
                    .followRedirects(true)
                    .timeout(15000)
                    .execute();
            
            System.out.println("Response Code: " + response.statusCode());
            System.out.println("Final URL: " + response.url());
            
            Document doc = response.parse();
            System.out.println("Page title: " + doc.title());
            System.out.println("HTML length: " + doc.html().length());
            
            // Debug: Print page structure
            debugPageStructure(doc);
            
            // Try comprehensive selector strategies
            tryAllSelectors(doc);
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private static void debugPageStructure(Document doc) {
        System.out.println("\n=== PAGE STRUCTURE DEBUG ===");
        
        // Look for common e-commerce patterns
        Elements cards = doc.select("div[class*='card'], div[class*='product'], div[class*='item']");
        System.out.println("Cards/Products/Items found: " + cards.size());
        
        // Check for data attributes
        Elements dataElements = doc.select("[data-*]");
        System.out.println("Elements with data attributes: " + dataElements.size());
        
        // Look for React/Vue components
        Elements reactElements = doc.select("[class*='react'], [class*='vue'], [id*='app'], [id*='root']");
        System.out.println("Framework elements found: " + reactElements.size());
        
        // Print first few class names to understand structure
        Elements allDivs = doc.select("div[class]");
        System.out.println("\n=== SAMPLE CLASS NAMES ===");
        for (int i = 0; i < Math.min(20, allDivs.size()); i++) {
            String className = allDivs.get(i).attr("class");
            if (!className.isEmpty()) {
                System.out.println("Class: " + className);
            }
        }
    }
    
    private static void tryAllSelectors(Document doc) {
        System.out.println("\n=== TRYING COMPREHENSIVE SELECTORS ===");
        
        String[] selectors = {
            // Generic product selectors
            "div[class*='product']",
            "div[class*='item']", 
            "div[class*='card']",
            "article",
            
            // Price-based selectors
            "*:contains(₹)",
            "span:contains(₹)",
            "div:contains(₹)",
            
            // List item selectors
            "li[class*='product']",
            "li[class*='item']",
            
            // Grid selectors
            "div[class*='grid'] > div",
            "div[class*='container'] > div",
            
            // React/Dynamic content
            "[data-testid*='product']",
            "[data-product-id]",
            "[data-sku]"
        };
        
        for (String selector : selectors) {
            Elements elements = doc.select(selector);
            System.out.println("Selector '" + selector + "' found: " + elements.size() + " elements");
            
            if (elements.size() > 0 && elements.size() < 100) {
                analyzeElements(elements, selector);
            }
        }
    }
    
    private static void analyzeElements(Elements elements, String selector) {
        System.out.println("\n--- Analyzing elements from: " + selector + " ---");
        
        for (int i = 0; i < Math.min(3, elements.size()); i++) {
            Element element = elements.get(i);
            System.out.println("\nElement " + (i+1) + ":");
            System.out.println("Text content (first 100 chars): " + 
                element.text().substring(0, Math.min(100, element.text().length())));
            System.out.println("Class: " + element.attr("class"));
            
            // Try to find price patterns
            String text = element.text();
            if (text.contains("₹") || text.matches(".*\\d+.*")) {
                System.out.println("*** Potential product element found! ***");
                System.out.println("Full text: " + text);
            }
        }
    }
}
